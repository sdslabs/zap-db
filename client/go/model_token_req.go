/*
zap-db

An easy to use JSON database created for memory management of slack bots

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TokenReq request body for update token by user
type TokenReq struct {
	Token *string `json:"token,omitempty"`
	Scopes *string `json:"scopes,omitempty"`
}

// NewTokenReq instantiates a new TokenReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenReq() *TokenReq {
	this := TokenReq{}
	return &this
}

// NewTokenReqWithDefaults instantiates a new TokenReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenReqWithDefaults() *TokenReq {
	this := TokenReq{}
	return &this
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *TokenReq) GetToken() string {
	if o == nil || o.Token == nil {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenReq) GetTokenOk() (*string, bool) {
	if o == nil || o.Token == nil {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *TokenReq) HasToken() bool {
	if o != nil && o.Token != nil {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *TokenReq) SetToken(v string) {
	o.Token = &v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *TokenReq) GetScopes() string {
	if o == nil || o.Scopes == nil {
		var ret string
		return ret
	}
	return *o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenReq) GetScopesOk() (*string, bool) {
	if o == nil || o.Scopes == nil {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *TokenReq) HasScopes() bool {
	if o != nil && o.Scopes != nil {
		return true
	}

	return false
}

// SetScopes gets a reference to the given string and assigns it to the Scopes field.
func (o *TokenReq) SetScopes(v string) {
	o.Scopes = &v
}

func (o TokenReq) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Token != nil {
		toSerialize["token"] = o.Token
	}
	if o.Scopes != nil {
		toSerialize["scopes"] = o.Scopes
	}
	return json.Marshal(toSerialize)
}

type NullableTokenReq struct {
	value *TokenReq
	isSet bool
}

func (v NullableTokenReq) Get() *TokenReq {
	return v.value
}

func (v *NullableTokenReq) Set(val *TokenReq) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenReq) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenReq(val *TokenReq) *NullableTokenReq {
	return &NullableTokenReq{value: val, isSet: true}
}

func (v NullableTokenReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


