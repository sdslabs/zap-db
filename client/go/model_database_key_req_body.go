/*
zap-db

An easy to use JSON database created for memory management of slack bots

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DatabaseKeyReqBody request body for create database by admin
type DatabaseKeyReqBody struct {
	Database *string `json:"database,omitempty"`
}

// NewDatabaseKeyReqBody instantiates a new DatabaseKeyReqBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseKeyReqBody() *DatabaseKeyReqBody {
	this := DatabaseKeyReqBody{}
	return &this
}

// NewDatabaseKeyReqBodyWithDefaults instantiates a new DatabaseKeyReqBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseKeyReqBodyWithDefaults() *DatabaseKeyReqBody {
	this := DatabaseKeyReqBody{}
	return &this
}

// GetDatabase returns the Database field value if set, zero value otherwise.
func (o *DatabaseKeyReqBody) GetDatabase() string {
	if o == nil || o.Database == nil {
		var ret string
		return ret
	}
	return *o.Database
}

// GetDatabaseOk returns a tuple with the Database field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseKeyReqBody) GetDatabaseOk() (*string, bool) {
	if o == nil || o.Database == nil {
		return nil, false
	}
	return o.Database, true
}

// HasDatabase returns a boolean if a field has been set.
func (o *DatabaseKeyReqBody) HasDatabase() bool {
	if o != nil && o.Database != nil {
		return true
	}

	return false
}

// SetDatabase gets a reference to the given string and assigns it to the Database field.
func (o *DatabaseKeyReqBody) SetDatabase(v string) {
	o.Database = &v
}

func (o DatabaseKeyReqBody) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Database != nil {
		toSerialize["database"] = o.Database
	}
	return json.Marshal(toSerialize)
}

type NullableDatabaseKeyReqBody struct {
	value *DatabaseKeyReqBody
	isSet bool
}

func (v NullableDatabaseKeyReqBody) Get() *DatabaseKeyReqBody {
	return v.value
}

func (v *NullableDatabaseKeyReqBody) Set(val *DatabaseKeyReqBody) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseKeyReqBody) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseKeyReqBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseKeyReqBody(val *DatabaseKeyReqBody) *NullableDatabaseKeyReqBody {
	return &NullableDatabaseKeyReqBody{value: val, isSet: true}
}

func (v NullableDatabaseKeyReqBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseKeyReqBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


