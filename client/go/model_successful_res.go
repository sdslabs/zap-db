/*
zap-db

An easy to use JSON database created for memory management of slack bots

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SuccessfulRes response body for a Successful request
type SuccessfulRes struct {
	Message *string `json:"message,omitempty"`
}

// NewSuccessfulRes instantiates a new SuccessfulRes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuccessfulRes() *SuccessfulRes {
	this := SuccessfulRes{}
	return &this
}

// NewSuccessfulResWithDefaults instantiates a new SuccessfulRes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuccessfulResWithDefaults() *SuccessfulRes {
	this := SuccessfulRes{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *SuccessfulRes) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuccessfulRes) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *SuccessfulRes) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *SuccessfulRes) SetMessage(v string) {
	o.Message = &v
}

func (o SuccessfulRes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	return json.Marshal(toSerialize)
}

type NullableSuccessfulRes struct {
	value *SuccessfulRes
	isSet bool
}

func (v NullableSuccessfulRes) Get() *SuccessfulRes {
	return v.value
}

func (v *NullableSuccessfulRes) Set(val *SuccessfulRes) {
	v.value = val
	v.isSet = true
}

func (v NullableSuccessfulRes) IsSet() bool {
	return v.isSet
}

func (v *NullableSuccessfulRes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuccessfulRes(val *SuccessfulRes) *NullableSuccessfulRes {
	return &NullableSuccessfulRes{value: val, isSet: true}
}

func (v NullableSuccessfulRes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuccessfulRes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


