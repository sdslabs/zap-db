/*
zap-db

An easy to use JSON database created for memory management of slack bots

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GetTokensByAdmin response body for get all tokens by admin
type GetTokensByAdmin struct {
	Token *GetTokensByAdminToken `json:"token,omitempty"`
}

// NewGetTokensByAdmin instantiates a new GetTokensByAdmin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetTokensByAdmin() *GetTokensByAdmin {
	this := GetTokensByAdmin{}
	return &this
}

// NewGetTokensByAdminWithDefaults instantiates a new GetTokensByAdmin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetTokensByAdminWithDefaults() *GetTokensByAdmin {
	this := GetTokensByAdmin{}
	return &this
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *GetTokensByAdmin) GetToken() GetTokensByAdminToken {
	if o == nil || o.Token == nil {
		var ret GetTokensByAdminToken
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetTokensByAdmin) GetTokenOk() (*GetTokensByAdminToken, bool) {
	if o == nil || o.Token == nil {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *GetTokensByAdmin) HasToken() bool {
	if o != nil && o.Token != nil {
		return true
	}

	return false
}

// SetToken gets a reference to the given GetTokensByAdminToken and assigns it to the Token field.
func (o *GetTokensByAdmin) SetToken(v GetTokensByAdminToken) {
	o.Token = &v
}

func (o GetTokensByAdmin) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Token != nil {
		toSerialize["token"] = o.Token
	}
	return json.Marshal(toSerialize)
}

type NullableGetTokensByAdmin struct {
	value *GetTokensByAdmin
	isSet bool
}

func (v NullableGetTokensByAdmin) Get() *GetTokensByAdmin {
	return v.value
}

func (v *NullableGetTokensByAdmin) Set(val *GetTokensByAdmin) {
	v.value = val
	v.isSet = true
}

func (v NullableGetTokensByAdmin) IsSet() bool {
	return v.isSet
}

func (v *NullableGetTokensByAdmin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetTokensByAdmin(val *GetTokensByAdmin) *NullableGetTokensByAdmin {
	return &NullableGetTokensByAdmin{value: val, isSet: true}
}

func (v NullableGetTokensByAdmin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetTokensByAdmin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


